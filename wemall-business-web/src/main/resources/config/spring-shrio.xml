<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
	<!-- 启用shrio授权注解拦截方式 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 装配 securityManager -->
		<property name="securityManager" ref="securityManager" />
		<!-- 配置登陆页面 -->
		<property name="loginUrl"
			value="http://localhost:8080/wemall/wemall-business-web/user/nolog" />
		<!-- 登陆成功后的一面 -->
		<property name="successUrl" value="/jsp/success.jsp" />
		<property name="unauthorizedUrl"
			value="http://localhost:8080/wemall/wemall-business-web/user/unauthorized" />
		<!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截. -->
		<!-- <property name="filterChainDefinitions"> <value> /index.jsp=anon /jsp/success.jsp=anon 
			/jsp/fail.jsp=anon /user/user = perms[user:view] /jsp/admin.jsp = roles[admin] 
			/logout = logout </value> </property> -->
		<property name="filters">
			<map>
				<entry key="rolesor">
					<bean class="com.wemall.shrio.filterchaindef.CustomRolesAuthorizationFilter" />
				</entry>
				<entry key="all">
					<bean class="com.wemall.shrio.filterchaindef.AllAuthorizationFilter" />
				</entry>
			</map>
		</property>
	</bean>
	<!-- 权限资源配置 -->
	<bean id="filterChainDefinitionsService"
		class="com.wemall.shrio.filterchaindef.SimpleFilterChainDefinitionsService">
		<property name="definitions">
			<value>
				<!-- /index.jsp=anon /jsp/success.jsp=anon /jsp/fail.jsp=anon /jsp/admin.jsp 
					= roles[admin] -->
				<!-- 此处改为从数据库读取 -->
				/logout = logout
			</value>
		</property>
	</bean>
	<!-- 配置缓存管理器 -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		指定 ehcache 的配置文件 <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" 
		/> </bean> -->
	<!-- 配置进行授权和认证的 Realm -->
	<!-- <bean id="myRealm" class="com.wemall.user.realm.UserRealm"> <property 
		name="userService" ref="userService" /> </bean> -->
	<!-- <bean id="userService" class="com.gray.user.service.impl.UserServiceImpl" 
		/> -->
	<!-- 配置 Shiro 的 SecurityManager Bean. -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<property name="sessionManager" ref="sessionManager"></property>
	</bean>
	<!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- Session ID 生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
    <!-- SessionDao实现类 -->
    <bean id="sessionDAO" class="com.wemall.shiro.dao.MySessionDao">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"></property>
    </bean>
	   <!-- session管理 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"></property>
        <property name="deleteInvalidSessions" value="true"></property>
        <property name="sessionDAO" ref="sessionDAO"></property>
        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
        <property name="sessionIdCookie" ref="sharesession" />
    </bean>
    
    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- cookie的name,对应的默认是 JSESSIONID -->
        <constructor-arg name="name" value="SHAREJSESSIONID" />
        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
        <property name="path" value="/" />
        <property name="httpOnly" value="true"/>
    </bean>
</beans>  